#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define N 5               // Number of philosophers
#define THINKING 0
#define HUNGRY 1
#define EATING 2

int state[N];             // To keep track of each philosopher's state
int phil[N] = {0,1,2,3,4}; // Philosopher IDs

sem_t mutex;              // Global mutual exclusion
sem_t S[N];               // One semaphore per philosopher

// Function to check if philosopher can eat
void test(int i) {
    if (state[i] == HUNGRY &&
        state[(i+4)%N] != EATING &&   // left neighbor
        state[(i+1)%N] != EATING) {   // right neighbor
        state[i] = EATING;
        sleep(1); // eating
        printf("Philosopher %d takes forks %d and %d\n", i+1, (i+4)%N+1, i+1);
        printf("Philosopher %d is Eating üçù\n", i+1);

        sem_post(&S[i]); // allow philosopher i to eat
    }
}

void take_fork(int i) {
    sem_wait(&mutex);     // enter critical section
    state[i] = HUNGRY;
    printf("Philosopher %d is Hungry üòã\n", i+1);
    test(i);              // try to pick forks
    sem_post(&mutex);     // exit critical section
    sem_wait(&S[i]);      // wait until forks are available
}

void put_fork(int i) {
    sem_wait(&mutex);     // enter critical section
    state[i] = THINKING;
    printf("Philosopher %d puts down forks %d and %d\n", i+1, (i+4)%N+1, i+1);
    printf("Philosopher %d is Thinking ü§î\n", i+1);

    test((i+4)%N);  // check if left neighbor can eat
    test((i+1)%N);  // check if right neighbor can eat
    sem_post(&mutex);     // exit critical section
}

void* philosopher(void* num) {
    int i = *(int*)num;

    while(1) {
        sleep(1);            // thinking
        take_fork(i);        // become hungry and try to eat
        sleep(2);            // eating
        put_fork(i);         // done eating
    }
}

int main() {
    pthread_t thread_id[N];

    sem_init(&mutex, 0, 1);  // initialize mutex

    for(int i=0; i<N; i++)
        sem_init(&S[i], 0, 0);  // initialize philosopher semaphores

    for(int i=0; i<N; i++)
        pthread_create(&thread_id[i], NULL, philosopher, &phil[i]);

    for(int i=0; i<N; i++)
        pthread_join(thread_id[i], NULL);

    return 0;
}
